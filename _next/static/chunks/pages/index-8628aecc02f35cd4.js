(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[405],{8312:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/",function(){return n(1957)}])},1957:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return pages}});var r=n(6416),a=n(5893),i=n(9008),o=n.n(i),u=n(7294),s=n(4131),l=n.n(s);let SampleLayout=e=>{let t=(0,u.useRef)(null),r=(0,u.useRef)(null),i=(0,u.useMemo)(()=>{if(e.gui){let e=n(4376);return new e.GUI({autoPlace:!1})}},[]),s=(0,u.useRef)(null),c=(0,u.useMemo)(()=>{if(e.stats){let e=n(2792);return new e}},[]),[d,f]=(0,u.useState)(null);return(0,u.useEffect)(()=>{if(i&&r.current)for(r.current.appendChild(i.domElement);i.__controllers.length>0;)i.__controllers[0].remove();c&&s.current&&(c.dom.style.position="absolute",c.showPanel(1),s.current.appendChild(c.dom));let n={active:!0};try{let r=t.current;if(!r)throw Error("The canvas is not available");let a=e.init({canvas:r,pageState:n,gui:i,stats:c});a instanceof Promise&&a.catch(e=>{console.error(e),f(e)})}catch(e){console.error(e),f(e)}return()=>{n.active=!1}},[]),(0,a.jsxs)("main",{children:[(0,a.jsxs)(o(),{children:[(0,a.jsx)("title",{children:"Terrain X"}),(0,a.jsx)("meta",{name:"description",content:e.description}),(0,a.jsx)("meta",{httpEquiv:"origin-trial",content:e.originTrial})]}),(0,a.jsxs)("div",{children:[(0,a.jsx)("h1",{children:e.name}),(0,a.jsx)("a",{target:"_blank",rel:"noreferrer",href:"https://github.com/".concat("GPU-Gang/WebGPU-Erosion-Simulation","/tree/main/").concat(e.filename),children:"See it on Github!"}),(0,a.jsx)("p",{children:e.description}),d?(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("p",{children:"Something went wrong. Do your browser and device support WebGPU?"}),(0,a.jsx)("p",{children:"".concat(d)})]}):null]}),(0,a.jsxs)("div",{className:l().canvasContainer,children:[(0,a.jsx)("div",{style:{position:"absolute",left:10},ref:s}),(0,a.jsx)("div",{style:{position:"absolute",right:10},ref:r}),(0,a.jsx)("canvas",{ref:t})]})]})},makeSample=e=>(0,a.jsx)(SampleLayout,{...e});var c="////////////////////////////////////////////////////////////////////////////////\n// Utilities\n////////////////////////////////////////////////////////////////////////////////\nvar<private> rand_seed : vec2<f32>;\n\nfn init_rand(invocation_id : u32, seed : vec4<f32>) {\n  rand_seed = seed.xz;\n  rand_seed = fract(rand_seed * cos(35.456+f32(invocation_id) * seed.yw));\n  rand_seed = fract(rand_seed * cos(41.235+f32(invocation_id) * seed.xw));\n}\n\nfn rand() -> f32 {\n  rand_seed.x = fract(cos(dot(rand_seed, vec2<f32>(23.14077926, 232.61690225))) * 136.8168);\n  rand_seed.y = fract(cos(dot(rand_seed, vec2<f32>(54.47856553, 345.84153136))) * 534.7645);\n  return rand_seed.y;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Vertex shader\n////////////////////////////////////////////////////////////////////////////////\nstruct RenderParams {\n  modelViewProjectionMatrix : mat4x4<f32>,\n  right : vec3<f32>,\n  up : vec3<f32>\n}\n@binding(0) @group(0) var<uniform> render_params : RenderParams;\n\nstruct VertexInput {\n  @location(0) position : vec3<f32>,\n  @location(1) color : vec4<f32>,\n  @location(2) quad_pos : vec2<f32>, // -1..+1\n}\n\nstruct VertexOutput {\n  @builtin(position) position : vec4<f32>,\n  @location(0) color : vec4<f32>,\n  @location(1) quad_pos : vec2<f32>, // -1..+1\n}\n\n@vertex\nfn vs_main(in : VertexInput) -> VertexOutput {\n  var quad_pos = mat2x3<f32>(render_params.right, render_params.up) * in.quad_pos;\n  var position = in.position + quad_pos * 0.01;\n  var out : VertexOutput;\n  out.position = render_params.modelViewProjectionMatrix * vec4<f32>(position, 1.0);\n  out.color = in.color;\n  out.quad_pos = in.quad_pos;\n  return out;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Fragment shader\n////////////////////////////////////////////////////////////////////////////////\n@fragment\nfn fs_main(in : VertexOutput) -> @location(0) vec4<f32> {\n  var color = in.color;\n  // Apply a circular particle alpha mask\n  color.a = color.a * max(1.0 - length(in.quad_pos), 0.0);\n  return color;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// Simulation Compute shader\n////////////////////////////////////////////////////////////////////////////////\nstruct SimulationParams {\n  deltaTime : f32,\n  seed : vec4<f32>,\n}\n\nstruct Particle {\n  position : vec3<f32>,\n  lifetime : f32,\n  color    : vec4<f32>,\n  velocity : vec3<f32>,\n}\n\nstruct Particles {\n  particles : array<Particle>,\n}\n\n@binding(0) @group(0) var<uniform> sim_params : SimulationParams;\n@binding(1) @group(0) var<storage, read_write> data : Particles;\n@binding(2) @group(0) var texture : texture_2d<f32>;\n\n@compute @workgroup_size(64)\nfn simulate(@builtin(global_invocation_id) global_invocation_id : vec3<u32>) {\n  let idx = global_invocation_id.x;\n\n  init_rand(idx, sim_params.seed);\n\n  var particle = data.particles[idx];\n\n  // Apply gravity\n  particle.velocity.z = particle.velocity.z - sim_params.deltaTime * 0.5;\n\n  // Basic velocity integration\n  particle.position = particle.position + sim_params.deltaTime * particle.velocity;\n\n  // Age each particle. Fade out before vanishing.\n  particle.lifetime = particle.lifetime - sim_params.deltaTime;\n  particle.color.a = smoothstep(0.0, 0.5, particle.lifetime);\n\n  // If the lifetime has gone negative, then the particle is dead and should be\n  // respawned.\n  if (particle.lifetime < 0.0) {\n    // Use the probability map to find where the particle should be spawned.\n    // Starting with the 1x1 mip level.\n    var coord : vec2<i32>;\n    for (var level = u32(textureNumLevels(texture) - 1); level > 0; level--) {\n      // Load the probability value from the mip-level\n      // Generate a random number and using the probabilty values, pick the\n      // next texel in the next largest mip level:\n      //\n      // 0.0    probabilites.r    probabilites.g    probabilites.b   1.0\n      //  |              |              |              |              |\n      //  |   TOP-LEFT   |  TOP-RIGHT   | BOTTOM-LEFT  | BOTTOM_RIGHT |\n      //\n      let probabilites = textureLoad(texture, coord, level);\n      let value = vec4<f32>(rand());\n      let mask = (value >= vec4<f32>(0.0, probabilites.xyz)) & (value < probabilites);\n      coord = coord * 2;\n      coord.x = coord.x + select(0, 1, any(mask.yw)); // x  y\n      coord.y = coord.y + select(0, 1, any(mask.zw)); // z  w\n    }\n    let uv = vec2<f32>(coord) / vec2<f32>(textureDimensions(texture));\n    particle.position = vec3<f32>((uv - 0.5) * 3.0 * vec2<f32>(1.0, -1.0), 0.0);\n    particle.color = textureLoad(texture, coord, 0);\n    particle.velocity.x = (rand() - 0.5) * 0.1;\n    particle.velocity.y = (rand() - 0.5) * 0.1;\n    particle.velocity.z = rand() * 0.3;\n    particle.lifetime = 0.5 + rand() * 3.0;\n  }\n\n  // Store the new particle value\n  data.particles[idx] = particle;\n}\n",d="struct UBO {\n  width : u32,\n}\n\nstruct Buffer {\n  weights : array<f32>,\n}\n\n@binding(0) @group(0) var<uniform> ubo : UBO;\n@binding(1) @group(0) var<storage, read> buf_in : Buffer;\n@binding(2) @group(0) var<storage, read_write> buf_out : Buffer;\n@binding(3) @group(0) var tex_in : texture_2d<f32>;\n@binding(3) @group(0) var tex_out : texture_storage_2d<rgba8unorm, write>;\n\n\n////////////////////////////////////////////////////////////////////////////////\n// import_level\n//\n// Loads the alpha channel from a texel of the source image, and writes it to\n// the buf_out.weights.\n////////////////////////////////////////////////////////////////////////////////\n@compute @workgroup_size(64)\nfn import_level(@builtin(global_invocation_id) coord : vec3<u32>) {\n  _ = &buf_in;\n  let offset = coord.x + coord.y * ubo.width;\n  buf_out.weights[offset] = textureLoad(tex_in, vec2<i32>(coord.xy), 0).w;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n// export_level\n//\n// Loads 4 f32 weight values from buf_in.weights, and stores summed value into\n// buf_out.weights, along with the calculated 'probabilty' vec4 values into the\n// mip level of tex_out. See simulate() in particle.wgsl to understand the\n// probability logic.\n////////////////////////////////////////////////////////////////////////////////\n@compute @workgroup_size(64)\nfn export_level(@builtin(global_invocation_id) coord : vec3<u32>) {\n  if (all(coord.xy < vec2<u32>(textureDimensions(tex_out)))) {\n    let dst_offset = coord.x    + coord.y    * ubo.width;\n    let src_offset = coord.x*2u + coord.y*2u * ubo.width;\n\n    let a = buf_in.weights[src_offset + 0u];\n    let b = buf_in.weights[src_offset + 1u];\n    let c = buf_in.weights[src_offset + 0u + ubo.width];\n    let d = buf_in.weights[src_offset + 1u + ubo.width];\n    let sum = dot(vec4<f32>(a, b, c, d), vec4<f32>(1.0));\n\n    buf_out.weights[dst_offset] = sum / 4.0;\n\n    let probabilities = vec4<f32>(a, a+b, a+b+c, sum) / max(sum, 0.0001);\n    textureStore(tex_out, vec2<i32>(coord.xy), probabilities);\n  }\n}\n",f="@group(0) @binding(0) var mySampler : sampler;\n@group(0) @binding(1) var myTexture : texture_2d<f32>;\n\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n}\n\n@vertex\nfn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  const pos = array(\n    vec2( 1.0,  1.0),\n    vec2( 1.0, -1.0),\n    vec2(-1.0, -1.0),\n    vec2( 1.0,  1.0),\n    vec2(-1.0, -1.0),\n    vec2(-1.0,  1.0),\n  );\n\n  const uv = array(\n    vec2(1.0, 0.0),\n    vec2(1.0, 1.0),\n    vec2(0.0, 1.0),\n    vec2(1.0, 0.0),\n    vec2(0.0, 1.0),\n    vec2(0.0, 0.0),\n  );\n\n  var output : VertexOutput;\n  output.Position = vec4(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n\n@fragment\nfn frag_main(@location(0) fragUV : vec2<f32>) -> @location(0) vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV);\n}\n";let init=async e=>{let t,{canvas:n,pageState:a,gui:i}=e,o=await navigator.gpu.requestAdapter(),u=await o.requestDevice();if(!a.active)return;let s=n.getContext("webgpu"),l=window.devicePixelRatio;n.width=n.clientWidth*l,n.height=n.clientHeight*l;let p=navigator.gpu.getPreferredCanvasFormat();s.configure({device:u,format:p,alphaMode:"premultiplied"});let m=u.createBuffer({size:24e5,usage:GPUBufferUsage.VERTEX|GPUBufferUsage.STORAGE}),g=u.createRenderPipeline({layout:"auto",vertex:{module:u.createShaderModule({code:c}),entryPoint:"vs_main",buffers:[{arrayStride:48,stepMode:"instance",attributes:[{shaderLocation:0,offset:0,format:"float32x3"},{shaderLocation:1,offset:16,format:"float32x4"}]},{arrayStride:8,stepMode:"vertex",attributes:[{shaderLocation:2,offset:0,format:"float32x2"}]}]},fragment:{module:u.createShaderModule({code:c}),entryPoint:"fs_main",targets:[{format:p,blend:{color:{srcFactor:"src-alpha",dstFactor:"one",operation:"add"},alpha:{srcFactor:"zero",dstFactor:"one",operation:"add"}}}]},primitive:{topology:"triangle-list"},depthStencil:{depthWriteEnabled:!1,depthCompare:"less",format:"depth24plus"}}),v=u.createRenderPipeline({layout:"auto",vertex:{module:u.createShaderModule({code:f}),entryPoint:"vert_main"},fragment:{module:u.createShaderModule({code:f}),entryPoint:"frag_main",targets:[{format:p}]},primitive:{topology:"triangle-list"}}),h=u.createSampler({magFilter:"linear",minFilter:"linear"}),_=u.createTexture({size:[n.width,n.height],format:"depth24plus",usage:GPUTextureUsage.RENDER_ATTACHMENT}),b=u.createBuffer({size:96,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),x=u.createBindGroup({layout:g.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:b}}]}),w={colorAttachments:[{view:void 0,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}],depthStencilAttachment:{view:_.createView(),depthClearValue:1,depthLoadOp:"clear",depthStoreOp:"store"}},y=u.createBuffer({size:48,usage:GPUBufferUsage.VERTEX,mappedAtCreation:!0});new Float32Array(y.getMappedRange()).set([-1,-1,1,-1,-1,1,-1,1,1,-1,1,1]),y.unmap();let P=1,T=1,U=1,[B,G]=[1,1];{let e=await fetch("../assets/img/terrainXLogo.png"),n=await createImageBitmap(await e.blob());for([B,G]=[n.width,n.height];P<n.width||T<n.height;)P*=2,T*=2,U++;t=u.createTexture({size:[B,G,1],mipLevelCount:U,format:"rgba8unorm",usage:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT}),u.queue.copyExternalImageToTexture({source:n},{texture:t},[B,G])}{let e=u.createComputePipeline({layout:"auto",compute:{module:u.createShaderModule({code:d}),entryPoint:"import_level"}}),n=u.createComputePipeline({layout:"auto",compute:{module:u.createShaderModule({code:d}),entryPoint:"export_level"}}),r=u.createBuffer({size:16,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST}),a=u.createBuffer({size:P*T*4,usage:GPUBufferUsage.STORAGE}),i=u.createBuffer({size:P*T*4,usage:GPUBufferUsage.STORAGE});u.queue.writeBuffer(r,0,new Int32Array([P]));let o=u.createCommandEncoder();for(let s=0;s<U;s++){let l=P>>s,c=T>>s,d=0==s?e.getBindGroupLayout(0):n.getBindGroupLayout(0),f=u.createBindGroup({layout:d,entries:[{binding:0,resource:{buffer:r}},{binding:1,resource:{buffer:1&s?a:i}},{binding:2,resource:{buffer:1&s?i:a}},{binding:3,resource:t.createView({format:"rgba8unorm",dimension:"2d",baseMipLevel:s,mipLevelCount:1})}]});if(0==s){let t=o.beginComputePass();t.setPipeline(e),t.setBindGroup(0,f),t.dispatchWorkgroups(Math.ceil(l/64),c),t.end()}else{let e=o.beginComputePass();e.setPipeline(n),e.setBindGroup(0,f),e.dispatchWorkgroups(Math.ceil(l/64),c),e.end()}}u.queue.submit([o.finish()])}let E={simulate:!0,deltaTime:.04,render2D:!1},S=u.createBuffer({size:32,usage:GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST});Object.keys(E).forEach(e=>{i.add(E,e)});let O=u.createComputePipeline({layout:"auto",compute:{module:u.createShaderModule({code:c}),entryPoint:"simulate"}}),M=u.createBindGroup({layout:O.getBindGroupLayout(0),entries:[{binding:0,resource:{buffer:S}},{binding:1,resource:{buffer:m,offset:0,size:24e5}},{binding:2,resource:t.createView()}]}),V=u.createBindGroup({layout:v.getBindGroupLayout(0),entries:[{binding:0,resource:h},{binding:1,resource:t.createView()}]}),C=n.width/n.height,R=r._E.perspective(2*Math.PI/5,C,1,100),L=r._E.create(),A=r._E.create();requestAnimationFrame(function frame(){if(!a.active)return;u.queue.writeBuffer(S,0,new Float32Array([E.simulate?E.deltaTime:0,0,0,0,100*Math.random(),100*Math.random(),1+Math.random(),1+Math.random()])),r._E.identity(L),r._E.translate(L,r.R3.fromValues(0,0,-3),L),r._E.rotateX(L,-.2*Math.PI,L),r._E.multiply(R,L,A),u.queue.writeBuffer(b,0,new Float32Array([A[0],A[1],A[2],A[3],A[4],A[5],A[6],A[7],A[8],A[9],A[10],A[11],A[12],A[13],A[14],A[15],L[0],L[4],L[8],0,L[1],L[5],L[9],0]));let e=s.getCurrentTexture();w.colorAttachments[0].view=e.createView();let t=u.createCommandEncoder();{let e=t.beginComputePass();e.setPipeline(O),e.setBindGroup(0,M),e.dispatchWorkgroups(Math.ceil(781.25)),e.end()}if(E.render2D){let e=t.beginRenderPass({colorAttachments:[{view:w.colorAttachments[0].view,clearValue:{r:0,g:0,b:0,a:1},loadOp:"clear",storeOp:"store"}]});e.setPipeline(v),e.setBindGroup(0,V),e.draw(6),e.end()}else{let e=t.beginRenderPass(w);e.setPipeline(g),e.setBindGroup(0,x),e.setVertexBuffer(0,m),e.setVertexBuffer(1,y),e.draw(6,5e4,0,0),e.end()}u.queue.submit([t.finish()]),requestAnimationFrame(frame)})};var pages=()=>makeSample({name:"Terrain X",description:"Interactive terrain authoring and erosion simulation on WebGPU",gui:!0,stats:!0,init,filename:"src/sample/terrainX/main.ts"})},4131:function(e){e.exports={canvasContainer:"SampleLayout_canvasContainer__ZTWP5"}}},function(e){e.O(0,[746,784,774,888,179],function(){return e(e.s=8312)}),_N_E=e.O()}]);